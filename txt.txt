import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import glob
from tqdm import tqdm
from scipy import signal as sp_signal # חשוב לייבוא scipy.signal לסינון ו-PSD

# --- Configuration ---
# !!! **חשוב מאוד** שנה את הערכים האלה בהתאם לנתונים שלך !!!
DATA_DIR = 'data'  # התיקייה שמכילה את קבצי ה-CSV
SAMPLING_RATE = 1000 # Hz (קצב הדגימה של הגאופונים)
# --------------------

# --- פונקציות טעינה וקורלציה (זהות לקוד הקודם) ---
def get_label_from_filename(filename):
    filename_lower = filename.lower()
    if 'nothing' in filename_lower: return 'nothing'
    elif 'human' in filename_lower or 'man' in filename_lower: return 'human'
    elif 'car' in filename_lower: return 'car'
    else: return None

data_structured = {}
labels_by_filename = {}
all_source_keys = []

csv_files = glob.glob(os.path.join(DATA_DIR, '*.csv'))
print(f"Found {len(csv_files)} CSV files in '{DATA_DIR}'.")
print("Processing CSV files...")
for filepath in tqdm(csv_files, desc="Loading Data", unit="file"):
    filename = os.path.basename(filepath)
    label = get_label_from_filename(filename)
    if label is None: continue
    try:
        if os.path.getsize(filepath) == 0: continue
        df = pd.read_csv(filepath, header=None)
        if df.empty: continue
        data_structured[filename] = {}
        labels_by_filename[filename] = label
        for i, col_name in enumerate(df.columns):
            if pd.api.types.is_numeric_dtype(df[col_name]):
                sensor_series = df[col_name].fillna(0).values.astype(np.float64)
                if len(sensor_series) >= 10:
                     data_structured[filename][i] = sensor_series
                     all_source_keys.append((filename, i))
    except Exception as e:
        tqdm.write(f"Error processing {filename}: {e}")

print(f"\nFinished loading data. Total unique signals: {len(all_source_keys)}")
if not all_source_keys:
     print("No data loaded successfully. Exiting.")
     exit()
print("\nAvailable data structure summary:")
for fname, cols_dict in data_structured.items():
    print(f"- File: {fname} (Label: {labels_by_filename[fname]}), Columns loaded: {list(cols_dict.keys())}")

def calculate_cross_correlation(sig1, sig2, sampling_rate):
    # ... (פונקציה זהה) ...
    sig1 = np.asarray(sig1, dtype=np.float64)
    sig2 = np.asarray(sig2, dtype=np.float64)
    sig1 = np.nan_to_num(sig1); sig2 = np.nan_to_num(sig2)
    if len(sig1) == 0 or len(sig2) == 0: return None, None, None, None
    mean1, std1 = np.mean(sig1), np.std(sig1)
    mean2, std2 = np.mean(sig2), np.std(sig2)
    sig1_norm = np.zeros_like(sig1) if std1 < 1e-9 else (sig1 - mean1) / std1
    sig2_norm = np.zeros_like(sig2) if std2 < 1e-9 else (sig2 - mean2) / std2
    correlation = np.correlate(sig1_norm, sig2_norm, mode='full')
    n1, n2 = len(sig1_norm), len(sig2_norm)
    lags_samples = np.arange(-(n2 - 1), n1)
    lags_ms = lags_samples * (1000.0 / sampling_rate)
    norm_factor = np.sqrt(np.sum(sig1_norm**2) * np.sum(sig2_norm**2))
    if norm_factor < 1e-9: normalized_correlation = np.zeros_like(correlation)
    else: normalized_correlation = correlation / norm_factor
    if len(normalized_correlation) == 0: return None, None, None, None
    peak_index = np.argmax(np.abs(normalized_correlation))
    peak_lag_ms = lags_ms[peak_index]
    peak_value = normalized_correlation[peak_index]
    if peak_index < 0 or peak_index >= len(lags_ms): peak_lag_ms, peak_value = None, None
    return lags_ms, normalized_correlation, peak_lag_ms, peak_value

def plot_cross_correlation(lags_ms, correlation, peak_lag_ms, peak_value, title):
    # ... (פונקציה זהה) ...
    if lags_ms is None or correlation is None: return
    plt.figure(figsize=(12, 5))
    plt.plot(lags_ms, correlation, label='Cross-correlation value', linewidth=1.5)
    if peak_lag_ms is not None and peak_value is not None:
        plt.scatter([peak_lag_ms], [peak_value], color='red', s=100, zorder=5, label=f'Peak: {peak_value:.2f} at {peak_lag_ms:.1f} ms')
    else: plt.text(0.05, 0.9, "Peak info unavailable", transform=plt.gca().transAxes, color='red')
    plt.axhline(0, color='grey', linestyle='--', linewidth=0.7); plt.axvline(0, color='grey', linestyle='--', linewidth=0.7)
    plt.title(title, fontsize=12); plt.xlabel('Lag (ms)', fontsize=12); plt.ylabel('Normalized Cross-correlation [-1, 1]', fontsize=12)
    plt.ylim([-1.1, 1.1]); plt.legend(); plt.grid(True, linestyle=':'); plt.tight_layout()

# --- פונקציות עזר לניתוח ספקטרלי וסינון (כולל Band-pass) ---
def plot_signal(signal, time_vector, title, ax=None):
    # ... (פונקציה זהה) ...
    if ax is None: fig, ax = plt.subplots(figsize=(12, 4))
    ax.plot(time_vector, signal, linewidth=1); ax.set_title(title, fontsize=12)
    ax.set_xlabel("Time (s)", fontsize=10); ax.set_ylabel("Amplitude", fontsize=10)
    ax.grid(True, linestyle=':');
    if ax is None: plt.tight_layout()

def plot_psd(signal, fs, title, ax=None, max_freq=None):
    # ... (פונקציה זהה) ...
    if ax is None: fig, ax = plt.subplots(figsize=(10, 5))
    frequencies, psd = sp_signal.welch(signal, fs, nperseg=min(fs*2, len(signal)), noverlap=min(fs, len(signal)//2), scaling='density') # More robust nperseg/noverlap
    ax.semilogy(frequencies, psd, linewidth=1); ax.set_title(title, fontsize=12)
    ax.set_xlabel('Frequency (Hz)', fontsize=10); ax.set_ylabel('PSD (Unit^2/Hz)', fontsize=10)
    if max_freq: ax.set_xlim(0, max_freq)
    ax.grid(True, which='both', linestyle=':');
    if ax is None: plt.tight_layout()

# --- חדש: פונקציה למסנן Band-pass ---
def apply_bandpass_filter(data, lowcut, highcut, fs, order=4):
    """מחילה מסנן Band-pass מסוג Butterworth על האות"""
    nyquist = 0.5 * fs
    low = lowcut / nyquist
    high = highcut / nyquist

    # בדוק תקינות תדרים
    if low <= 0 and high >= 1: # No filtering needed if it covers the whole range
        print("Warning: Bandpass range covers all frequencies. Skipping filtering.")
        return data
    elif low <= 0: # Effectively a low-pass filter
        print(f"Info: Applying Low-pass filter (cutoff={highcut} Hz)")
        b, a = sp_signal.butter(order, high, btype='low', analog=False)
    elif high >= 1: # Effectively a high-pass filter
        print(f"Info: Applying High-pass filter (cutoff={lowcut} Hz)")
        b, a = sp_signal.butter(order, low, btype='high', analog=False)
    elif low >= high:
         print(f"Error: Lowcut frequency ({lowcut}) must be lower than Highcut frequency ({highcut}). Skipping filtering.")
         return data
    else: # Standard band-pass filter
         b, a = sp_signal.butter(order, [low, high], btype='band', analog=False)

    # Apply filter using filtfilt for zero phase distortion
    filtered_data = sp_signal.filtfilt(b, a, data)
    return filtered_data

# --- ניתוח ספציפי: אדם מול שקט (גאופון 0) ---

print("\n--- Analyzing Human vs. Nothing (Column 0) with Bandpass Filter ---")

# 1. בחירת האותות הרלוונטיים (כמו קודם)
human_file = next((f for f in data_structured if 'human' in f.lower() and 'nothing' not in f.lower()), None)
nothing_file = next((f for f in data_structured if 'nothing' in f.lower()), None)

signal_human_col0 = None
signal_nothing_col0 = None
time_vector_human = None
time_vector_nothing = None

if human_file and 0 in data_structured.get(human_file, {}):
    signal_human_col0 = data_structured[human_file][0]
    time_vector_human = np.arange(len(signal_human_col0)) / SAMPLING_RATE
    print(f"Found Human signal: {human_file}, Column 0, Length={len(signal_human_col0)}")
else:
    print("Human signal (Column 0) not found.")

if nothing_file and 0 in data_structured.get(nothing_file, {}):
    signal_nothing_col0 = data_structured[nothing_file][0]
    time_vector_nothing = np.arange(len(signal_nothing_col0)) / SAMPLING_RATE
    print(f"Found Nothing signal: {nothing_file}, Column 0, Length={len(signal_nothing_col0)}")
else:
    print("Nothing signal (Column 0) not found.")

# המשך רק אם שני האותות נמצאו
if signal_human_col0 is not None and signal_nothing_col0 is not None:

    # --- 2. הגדרת פרמטרי סינון Band-pass ויישום ---
    # !!! **התאם את התדרים האלה לפי ההבנה שלך מה-PSD המקורי!** !!!
    LOW_CUTOFF = 5.0  # Hz (תדר נמוך לחתוך מתחתיו)
    HIGH_CUTOFF = 150.0 # Hz (תדר גבוה לחתוך מעליו)
    FILTER_ORDER = 4   # סדר המסנן (משפיע על התלילות של החיתוך)

    print(f"\n--- Applying Bandpass Filter ({LOW_CUTOFF} Hz - {HIGH_CUTOFF} Hz) ---")
    filtered_human_bp = apply_bandpass_filter(signal_human_col0, LOW_CUTOFF, HIGH_CUTOFF, SAMPLING_RATE, order=FILTER_ORDER)
    filtered_nothing_bp = apply_bandpass_filter(signal_nothing_col0, LOW_CUTOFF, HIGH_CUTOFF, SAMPLING_RATE, order=FILTER_ORDER)

    # --- 3. ניתוח אחרי סינון Band-pass ---
    print("\n--- Analysis AFTER Bandpass Filtering ---")
    fig_after_bp, axs_after_bp = plt.subplots(2, 2, figsize=(15, 10))
    title_suffix = f"({LOW_CUTOFF}-{HIGH_CUTOFF} Hz BP Filter)"
    fig_after_bp.suptitle(f'Analysis AFTER Bandpass Filter {title_suffix} (Human vs Nothing - Col 0)', fontsize=16)

    # הצגת אותות מסוננים בזמן
    plot_signal(filtered_human_bp, time_vector_human, f"Filtered Human Signal {title_suffix}", ax=axs_after_bp[0, 0])
    plot_signal(filtered_nothing_bp, time_vector_nothing, f"Filtered Nothing Signal {title_suffix}", ax=axs_after_bp[0, 1])

    # הצגת PSD מסונן
    # הגבל תצוגה כדי לראות את אזור ה-Passband טוב יותר
    plot_psd(filtered_human_bp, SAMPLING_RATE, f"PSD - Filtered Human {title_suffix}", ax=axs_after_bp[1, 0], max_freq=HIGH_CUTOFF + 50)
    plot_psd(filtered_nothing_bp, SAMPLING_RATE, f"PSD - Filtered Nothing {title_suffix}", ax=axs_after_bp[1, 1], max_freq=HIGH_CUTOFF + 50)
    # הדגשת אזור ה-Passband ב-PSD
    axs_after_bp[1, 0].axvspan(LOW_CUTOFF, HIGH_CUTOFF, color='green', alpha=0.1, label='Passband')
    axs_after_bp[1, 1].axvspan(LOW_CUTOFF, HIGH_CUTOFF, color='green', alpha=0.1, label='Passband')
    axs_after_bp[1, 0].legend(loc='lower left')
    axs_after_bp[1, 1].legend(loc='lower left')

    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) # Adjust layout
    plt.show() # הצג את הגרפים האלה

    # --- 4. הצגת קרוס-קורלציה *אחרי* סינון Band-pass ---
    lags_bp, corr_bp, peak_lag_bp, peak_val_bp = calculate_cross_correlation(filtered_human_bp, filtered_nothing_bp, SAMPLING_RATE)
    plot_cross_correlation(lags_bp, corr_bp, peak_lag_bp, peak_val_bp, f"Cross-Correlation AFTER Bandpass Filter {title_suffix}\nHuman Col0 vs Nothing Col0")
    if peak_val_bp is not None: print(f"Peak Correlation AFTER Bandpass Filtering: {peak_val_bp:.2f}")
    plt.show() # הצג את הגרף הסופי

else:
    print("\nCould not perform detailed analysis because one or both required signals (human col0, nothing col0) were not found.")

print("\n--- Analysis Script Complete ---")
