import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import glob
from tqdm import tqdm
from scipy import signal as sp_signal # חשוב לייבוא scipy.signal לסינון ו-PSD

# --- Configuration ---
# !!! **חשוב מאוד** שנה את הערכים האלה בהתאם לנתונים שלך !!!
DATA_DIR = 'data'  # התיקייה שמכילה את קבצי ה-CSV
SAMPLING_RATE = 1000 # Hz (קצב הדגימה של הגאופונים)
# --------------------

# --- פונקציות טעינה וקורלציה (מהקוד הקודם, ללא שינוי מהותי) ---
def get_label_from_filename(filename):
    filename_lower = filename.lower()
    if 'nothing' in filename_lower: return 'nothing'
    elif 'human' in filename_lower or 'man' in filename_lower: return 'human'
    elif 'car' in filename_lower: return 'car'
    else: return None

data_structured = {}
labels_by_filename = {}
all_source_keys = []

csv_files = glob.glob(os.path.join(DATA_DIR, '*.csv'))
print(f"Found {len(csv_files)} CSV files in '{DATA_DIR}'.")
print("Processing CSV files...")
for filepath in tqdm(csv_files, desc="Loading Data", unit="file"):
    filename = os.path.basename(filepath)
    label = get_label_from_filename(filename)
    if label is None: continue
    try:
        if os.path.getsize(filepath) == 0: continue
        df = pd.read_csv(filepath, header=None)
        if df.empty: continue
        data_structured[filename] = {}
        labels_by_filename[filename] = label
        for i, col_name in enumerate(df.columns):
            if pd.api.types.is_numeric_dtype(df[col_name]):
                sensor_series = df[col_name].fillna(0).values.astype(np.float64)
                if len(sensor_series) >= 10:
                     data_structured[filename][i] = sensor_series
                     all_source_keys.append((filename, i))
    except Exception as e:
        tqdm.write(f"Error processing {filename}: {e}")

print(f"\nFinished loading data. Total unique signals: {len(all_source_keys)}")
if not all_source_keys:
     print("No data loaded successfully. Exiting.")
     exit()
print("\nAvailable data structure summary:")
for fname, cols_dict in data_structured.items():
    print(f"- File: {fname} (Label: {labels_by_filename[fname]}), Columns loaded: {list(cols_dict.keys())}")

def calculate_cross_correlation(sig1, sig2, sampling_rate):
    sig1 = np.asarray(sig1, dtype=np.float64)
    sig2 = np.asarray(sig2, dtype=np.float64)
    sig1 = np.nan_to_num(sig1); sig2 = np.nan_to_num(sig2)
    if len(sig1) == 0 or len(sig2) == 0: return None, None, None, None
    mean1, std1 = np.mean(sig1), np.std(sig1)
    mean2, std2 = np.mean(sig2), np.std(sig2)
    sig1_norm = np.zeros_like(sig1) if std1 < 1e-9 else (sig1 - mean1) / std1
    sig2_norm = np.zeros_like(sig2) if std2 < 1e-9 else (sig2 - mean2) / std2
    correlation = np.correlate(sig1_norm, sig2_norm, mode='full')
    n1, n2 = len(sig1_norm), len(sig2_norm)
    lags_samples = np.arange(-(n2 - 1), n1)
    lags_ms = lags_samples * (1000.0 / sampling_rate)
    norm_factor = np.sqrt(np.sum(sig1_norm**2) * np.sum(sig2_norm**2))
    if norm_factor < 1e-9: normalized_correlation = np.zeros_like(correlation)
    else: normalized_correlation = correlation / norm_factor
    if len(normalized_correlation) == 0: return None, None, None, None
    peak_index = np.argmax(np.abs(normalized_correlation))
    peak_lag_ms = lags_ms[peak_index]
    peak_value = normalized_correlation[peak_index]
    if peak_index < 0 or peak_index >= len(lags_ms): peak_lag_ms, peak_value = None, None
    return lags_ms, normalized_correlation, peak_lag_ms, peak_value

def plot_cross_correlation(lags_ms, correlation, peak_lag_ms, peak_value, title):
    if lags_ms is None or correlation is None: return
    plt.figure(figsize=(12, 5))
    plt.plot(lags_ms, correlation, label='Cross-correlation value', linewidth=1.5)
    if peak_lag_ms is not None and peak_value is not None:
        plt.scatter([peak_lag_ms], [peak_value], color='red', s=100, zorder=5, label=f'Peak: {peak_value:.2f} at {peak_lag_ms:.1f} ms')
    else: plt.text(0.05, 0.9, "Peak info unavailable", transform=plt.gca().transAxes, color='red')
    plt.axhline(0, color='grey', linestyle='--', linewidth=0.7); plt.axvline(0, color='grey', linestyle='--', linewidth=0.7)
    plt.title(title, fontsize=12); plt.xlabel('Lag (ms)', fontsize=12); plt.ylabel('Normalized Cross-correlation [-1, 1]', fontsize=12)
    plt.ylim([-1.1, 1.1]); plt.legend(); plt.grid(True, linestyle=':'); plt.tight_layout()

# --- חדש: פונקציות עזר לניתוח ספקטרלי וסינון ---
def plot_signal(signal, time_vector, title, ax=None):
    """מציגה גרף של אות בזמן"""
    if ax is None:
        fig, ax = plt.subplots(figsize=(12, 4))
    ax.plot(time_vector, signal, linewidth=1)
    ax.set_title(title, fontsize=12)
    ax.set_xlabel("Time (s)", fontsize=10)
    ax.set_ylabel("Amplitude", fontsize=10)
    ax.grid(True, linestyle=':')
    if ax is None: plt.tight_layout()

def plot_psd(signal, fs, title, ax=None, max_freq=None):
    """מחשבת ומציגה Power Spectral Density (PSD)"""
    if ax is None:
        fig, ax = plt.subplots(figsize=(10, 5))
    # שימוש ב-Welch's method להערכת PSD יציבה יותר
    frequencies, psd = sp_signal.welch(signal, fs, nperseg=fs*2, noverlap=fs, scaling='density') # Adjust nperseg/noverlap as needed
    ax.semilogy(frequencies, psd, linewidth=1) # Use log scale for Y axis
    ax.set_title(title, fontsize=12)
    ax.set_xlabel('Frequency (Hz)', fontsize=10)
    ax.set_ylabel('PSD (Unit^2/Hz)', fontsize=10) # Adjust unit based on signal
    if max_freq:
         ax.set_xlim(0, max_freq)
    ax.grid(True, which='both', linestyle=':') # Grid for both major and minor ticks
    if ax is None: plt.tight_layout()

def apply_notch_filter(data, noisy_freq, quality_factor, fs):
    """מחילה מסנן Notch על האות"""
    if noisy_freq <= 0 or noisy_freq >= fs/2:
         print(f"Warning: Invalid notch frequency {noisy_freq} Hz for sampling rate {fs} Hz. Skipping filtering.")
         return data
    # Design notch filter
    b, a = sp_signal.iirnotch(noisy_freq, quality_factor, fs)
    # Apply filter using filtfilt for zero phase distortion
    filtered_data = sp_signal.filtfilt(b, a, data)
    return filtered_data

# --- ניתוח ספציפי: אדם מול שקט (גאופון 0) ---

print("\n--- Analyzing Human vs. Nothing (Column 0) ---")

# 1. בחירת האותות הרלוונטיים
human_file = next((f for f in data_structured if 'human' in f.lower() and 'nothing' not in f.lower()), None)
nothing_file = next((f for f in data_structured if 'nothing' in f.lower()), None)

signal_human_col0 = None
signal_nothing_col0 = None
time_vector_human = None
time_vector_nothing = None

if human_file and 0 in data_structured.get(human_file, {}):
    signal_human_col0 = data_structured[human_file][0]
    time_vector_human = np.arange(len(signal_human_col0)) / SAMPLING_RATE
    print(f"Found Human signal: {human_file}, Column 0, Length={len(signal_human_col0)}")
else:
    print("Human signal (Column 0) not found.")

if nothing_file and 0 in data_structured.get(nothing_file, {}):
    signal_nothing_col0 = data_structured[nothing_file][0]
    time_vector_nothing = np.arange(len(signal_nothing_col0)) / SAMPLING_RATE
    print(f"Found Nothing signal: {nothing_file}, Column 0, Length={len(signal_nothing_col0)}")
else:
    print("Nothing signal (Column 0) not found.")

# המשך רק אם שני האותות נמצאו
if signal_human_col0 is not None and signal_nothing_col0 is not None:

    # 2. ניתוח לפני סינון
    print("\n--- Analysis BEFORE Filtering ---")
    fig_before, axs_before = plt.subplots(2, 2, figsize=(15, 10))
    fig_before.suptitle('Analysis BEFORE Filtering (Human vs Nothing - Col 0)', fontsize=16)

    # הצגת אותות בזמן
    plot_signal(signal_human_col0, time_vector_human, f"Original Human Signal ({human_file} Col0)", ax=axs_before[0, 0])
    plot_signal(signal_nothing_col0, time_vector_nothing, f"Original Nothing Signal ({nothing_file} Col0)", ax=axs_before[0, 1])

    # הצגת PSD
    # הגבל את תצוגת התדרים לתחום מעניין (למשל, עד 200Hz) כדי לראות טוב יותר רעשי רשת
    plot_psd(signal_human_col0, SAMPLING_RATE, "PSD - Original Human", ax=axs_before[1, 0], max_freq=200)
    plot_psd(signal_nothing_col0, SAMPLING_RATE, "PSD - Original Nothing", ax=axs_before[1, 1], max_freq=200)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) # Adjust layout
    plt.show() # הצג את הגרפים האלה קודם

    # הצגת קרוס-קורלציה מקורית
    lags, corr, peak_lag, peak_val = calculate_cross_correlation(signal_human_col0, signal_nothing_col0, SAMPLING_RATE)
    plot_cross_correlation(lags, corr, peak_lag, peak_val, f"Cross-Correlation BEFORE Filtering\nHuman Col0 vs Nothing Col0")
    if peak_val is not None: print(f"Peak Correlation BEFORE Filtering: {peak_val:.2f}")
    plt.show() # הצג גם את זה

    # 3. הגדרת פרמטרי סינון ויישום
    # !!! **בדוק את גרפי ה-PSD!** אם אתה רואה פיק ברור ב-60Hz, שנה ל-60. !!!
    NOISY_FREQ = 50.0  # Hz (התדר שזוהה ב-PSD להסרה)
    QUALITY_FACTOR = 30.0 # גורם איכות למסנן Notch (ערך גבוה = חריץ צר יותר)

    print(f"\n--- Applying Notch Filter at {NOISY_FREQ} Hz ---")
    filtered_human_col0 = apply_notch_filter(signal_human_col0, NOISY_FREQ, QUALITY_FACTOR, SAMPLING_RATE)
    filtered_nothing_col0 = apply_notch_filter(signal_nothing_col0, NOISY_FREQ, QUALITY_FACTOR, SAMPLING_RATE)

    # --- 4. ניתוח אחרי סינון ---
    print("\n--- Analysis AFTER Filtering ---")
    fig_after, axs_after = plt.subplots(2, 2, figsize=(15, 10))
    fig_after.suptitle(f'Analysis AFTER Notch Filter ({NOISY_FREQ} Hz) (Human vs Nothing - Col 0)', fontsize=16)

    # הצגת אותות מסוננים בזמן
    plot_signal(filtered_human_col0, time_vector_human, f"Filtered Human Signal ({human_file} Col0)", ax=axs_after[0, 0])
    plot_signal(filtered_nothing_col0, time_vector_nothing, f"Filtered Nothing Signal ({nothing_file} Col0)", ax=axs_after[0, 1])

    # הצגת PSD מסונן
    plot_psd(filtered_human_col0, SAMPLING_RATE, "PSD - Filtered Human", ax=axs_after[1, 0], max_freq=200)
    plot_psd(filtered_nothing_col0, SAMPLING_RATE, "PSD - Filtered Nothing", ax=axs_after[1, 1], max_freq=200)
    plt.tight_layout(rect=[0, 0.03, 1, 0.95]) # Adjust layout
    plt.show() # הצג את הגרפים האלה

    # הצגת קרוס-קורלציה *אחרי* סינון
    lags_filt, corr_filt, peak_lag_filt, peak_val_filt = calculate_cross_correlation(filtered_human_col0, filtered_nothing_col0, SAMPLING_RATE)
    plot_cross_correlation(lags_filt, corr_filt, peak_lag_filt, peak_val_filt, f"Cross-Correlation AFTER Notch Filter ({NOISY_FREQ} Hz)\nHuman Col0 vs Nothing Col0")
    if peak_val_filt is not None: print(f"Peak Correlation AFTER Filtering: {peak_val_filt:.2f}")
    plt.show() # הצג את הגרף הסופי

else:
    print("\nCould not perform detailed analysis because one or both required signals (human col0, nothing col0) were not found.")

print("\n--- Analysis Script Complete ---")
